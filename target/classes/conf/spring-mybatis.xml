<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-3.2.xsd">

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
    destroy-method="close" >
    <property name="driverClassName">
      <value>${jdbc_driverClassName}</value>
    </property>
    <property name="url">
      <value>${jdbc_url}</value>
    </property>
    <property name="username">
      <value>${jdbc_username}</value>
    </property>
    <property name="password">
      <value>${jdbc_password}</value>
    </property>
     <!-- 配置初始化大小、最小、最大 -->
      <property name="initialSize" value="1" />
      <property name="minIdle" value="1" />
      <property name="maxActive" value="20" />

      <!-- 配置获取连接等待超时的时间 -->
      <property name="maxWait" value="60000" />

      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="60000" />

      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="300000" />

      <property name="validationQuery" value="SELECT 'x'" />
      <property name="testWhileIdle" value="true" />
      <property name="testOnBorrow" value="false" />
      <property name="testOnReturn" value="false" />

      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
      <property name="poolPreparedStatements" value="true" />
      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

      <!-- 配置监控统计拦截的filters -->
      <property name="filters" value="stat" />
    <!-- 连接属性 -->
    <property name="connectionProperties">
      <value>clientEncoding=UTF-8</value>
    </property>
  </bean>

    <!-- mybatis文件配置，扫描所有mapper文件 -->
      <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean"
          p:dataSource-ref="dataSource"
          p:configLocation="classpath:conf/mybatis-config.xml"
          p:mapperLocations="classpath:mapper/*.xml"/><!-- configLocation为mybatis属性 mapperLocations为所有mapper-->

    <!-- 配置扫描DAO接口包 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" >
        <!-- 注入SqlSessionFactory --><!-- sqlSessionFactoryBeanName为防止提前初始化sql工厂 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 扫描dao -->
        <property name="basePackage" value="com.personal.dao"/>
    </bean>

   <!-- 对数据源进行事务管理 -->
  	<bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
        p:dataSource-ref="dataSource"/>
    <tx:advice id="userTxAdvice" transaction-manager="transactionManager">
	    <tx:attributes>
	      <tx:method name="delete*" propagation="REQUIRED" read-only="false"
	                            rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException"/>
	      <tx:method name="insert*" propagation="REQUIRED" read-only="false"
	                            rollback-for="java.lang.RuntimeException" />
	      <tx:method name="update*" propagation="REQUIRED" read-only="false"
	                            rollback-for="java.lang.Exception" />

	      <tx:method name="find*" propagation="SUPPORTS"/>
	      <tx:method name="get*" propagation="SUPPORTS"/>
	      <tx:method name="query*" propagation="SUPPORTS"/>
	    </tx:attributes>
  	</tx:advice>

	  <aop:config>
	    <aop:pointcut id="pc" expression="execution(public * com.personal.service.*.*(..))" /> <!--把事务控制在Service层-->
	    <aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />
	  </aop:config>
</beans>